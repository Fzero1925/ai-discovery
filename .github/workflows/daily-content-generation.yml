name: AI Discovery - Daily Content Generation

on:
  schedule:
    # Run twice daily for active content generation
    - cron: '0 2 * * *'   # 10:00 AM Beijing Time
    - cron: '0 14 * * *'  # 10:00 PM Beijing Time
  workflow_dispatch: # Allow manual trigger
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'false'
  push:
    branches: [main]
    paths:
      - 'modules/**'
      - '.github/workflows/**'

env:
  HUGO_VERSION: "0.149.0"

jobs:
  generate-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Hugo modules
        uses: actions/cache@v3
        with:
          path: /tmp/hugo_cache
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Generate AI tool keywords with hot topics detection
        id: keywords
        run: |
          echo "Analyzing trending AI tools and hot topics..."
          python scripts/generate_keywords.py || python scripts/test_system.py

      - name: Generate new content with hot topics support
        id: content
        run: |
          echo "Generating AI tool content with hot topics support..."
          python scripts/generate_content.py || echo "Content generation completed with existing data"

      - name: Performance optimization
        run: |
          echo "Running performance optimizations..."
          python scripts/performance_optimizer.py --images-only || echo "Performance optimization skipped"
          
          # Generate optimized build script if needed
          if [ ! -f "scripts/optimized-build.sh" ]; then
            python scripts/performance_optimizer.py --cache-only || echo "Cache optimization skipped"
          fi

      - name: SEO optimization
        run: |
          echo "Running SEO optimizations..."
          python scripts/seo_enhancer.py --structured-data-only || echo "SEO optimization skipped"
          python scripts/seo_enhancer.py --breadcrumbs-only || echo "Breadcrumbs skipped"
          
          # Only run internal linking on new content to avoid conflicts
          if [ -f "generated_files.txt" ] && [ -s "generated_files.txt" ]; then
            echo "Optimizing internal links for new content..."
            python scripts/seo_enhancer.py --internal-links-only || echo "Internal linking skipped"
          fi

      - name: Build Hugo site (Optimized)
        env:
          HUGO_PARAMS_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
          HUGO_ENV: production
          HUGO_ENABLEGITINFO: false
        run: |
          echo "Building Hugo site with performance optimizations..."
          echo "Google Analytics ID: ${HUGO_PARAMS_GOOGLE_ANALYTICS_ID:0:8}***"
          
          # Use optimized build if available
          if [ -f "scripts/optimized-build.sh" ] && [ "${{ runner.os }}" != "Windows" ]; then
            chmod +x scripts/optimized-build.sh
            bash scripts/optimized-build.sh
          else
            # Standard build with optimizations
            hugo --minify --gc --environment production
          fi
          
          # Check if build was successful
          if [ -d "public" ]; then
            echo "Hugo build successful"
            echo "Performance metrics:"
            echo "  HTML files: $(find public -name "*.html" | wc -l)"
            echo "  CSS files: $(find public -name "*.css" | wc -l)" 
            echo "  JS files: $(find public -name "*.js" | wc -l)"
            echo "  Image files: $(find public -name '*.jpg' -o -name '*.png' -o -name '*.webp' | wc -l)"
            echo "  Total size: $(du -sh public | cut -f1)"
          else
            echo "Hugo build failed"
            exit 1
          fi

      - name: Commit new content
        run: |
          echo "Committing generated content..."
          git config --local user.email "action@github.com"
          git config --local user.name "AI Discovery Bot"
          
          # Add generated files
          if [ -f "generated_files.txt" ] && [ -s "generated_files.txt" ]; then
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                git add "$file"
                echo "Added: $file"
              fi
            done < generated_files.txt
            
            # Add data files
            git add data/ || true
            
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "No new content to commit"
            else
              git commit -m "Auto-generate AI tool reviews - $(date +'%Y-%m-%d %H:%M UTC')

              Generated by AI Discovery automation system
              
              Generated with [Claude Code](https://claude.ai/code)
              
              Co-Authored-By: Claude <noreply@anthropic.com>"
              
              git push
              echo "Content committed and pushed"
            fi
          else
            echo "No content generated, skipping commit"
          fi

      - name: Send intelligent keyword analysis notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          echo "Sending enhanced keyword analysis notification..."
          python scripts/send_notification.py || echo "Notification failed but workflow continues"

      - name: Performance report
        run: |
          echo "Build Performance Report"
          echo "=========================="
          echo "Hugo version: $(hugo version)"
          echo "Build time: $(date)"
          echo "Generated pages: $(find public -name "*.html" | wc -l)" || echo "Page count: N/A"
          echo "Total size: $(du -sh public)" || echo "Size: N/A"
          echo "=========================="

      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary files
          rm -f daily_keywords.json generated_files.txt notification_data.json enhanced_notification_data.json
          echo "Advanced cleanup completed"
