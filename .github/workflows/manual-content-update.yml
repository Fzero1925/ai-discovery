name: AI Discovery - Manual Content Update

on:
  workflow_dispatch:
    inputs:
      tool_names:
        description: 'AI tool names to generate content for (comma-separated)'
        required: false
        default: 'ChatGPT,Midjourney,GitHub Copilot'
        type: string
      force_regenerate:
        description: 'Force regenerate existing content'
        required: false
        default: false
        type: boolean
      deploy_immediately:
        description: 'Deploy to production immediately after generation'
        required: false
        default: true
        type: boolean

env:
  HUGO_VERSION: "0.149.0"

jobs:
  manual-content-generation:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Display input parameters
        run: |
          echo "🎯 Manual Content Generation Parameters:"
          echo "========================================"
          echo "Tool names: ${{ github.event.inputs.tool_names }}"
          echo "Force regenerate: ${{ github.event.inputs.force_regenerate }}"
          echo "Deploy immediately: ${{ github.event.inputs.deploy_immediately }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "========================================"

      - name: Generate specified content
        id: generate
        run: |
          echo "📝 Starting manual content generation..."
          python -c "
          import sys, os
          from datetime import datetime
          sys.path.append('modules')
          from content_generator.ai_tool_content_generator import AIToolContentGenerator
          
          # Parse input tool names
          tool_names_input = '${{ github.event.inputs.tool_names }}'.strip()
          if tool_names_input:
              requested_tools = [name.strip() for name in tool_names_input.split(',')]
          else:
              requested_tools = []
          
          force_regenerate = '${{ github.event.inputs.force_regenerate }}' == 'true'
          
          generator = AIToolContentGenerator()
          available_tools = list(generator.ai_tool_database.keys())
          
          print(f'Available tools: {available_tools}')
          print(f'Requested tools: {requested_tools}')
          print(f'Force regenerate: {force_regenerate}')
          
          # Determine which tools to process
          if requested_tools:
              tools_to_process = [tool for tool in requested_tools if tool in available_tools]
              invalid_tools = [tool for tool in requested_tools if tool not in available_tools]
              
              if invalid_tools:
                  print(f'Warning: Invalid tool names: {invalid_tools}')
          else:
              tools_to_process = available_tools
          
          print(f'Processing tools: {tools_to_process}')
          
          # Generate content
          generated_files = []
          skipped_files = []
          
          os.makedirs('content/reviews', exist_ok=True)
          
          for tool_name in tools_to_process:
              try:
                  # Create filename
                  safe_name = tool_name.lower().replace(' ', '-').replace('/', '-')
                  filename = f'content/reviews/{safe_name}-manual-review-{datetime.now().strftime(\"%Y%m%d-%H%M\")}.md'
                  
                  # Check if we should skip existing files
                  existing_files = [f for f in os.listdir('content/reviews') if f.startswith(safe_name)]
                  if existing_files and not force_regenerate:
                      print(f'Skipping {tool_name} - content already exists (use force_regenerate to override)')
                      skipped_files.append(tool_name)
                      continue
                  
                  # Generate content
                  target_keywords = [
                      f'{tool_name} review',
                      f'{tool_name} guide', 
                      f'best {tool_name} alternatives',
                      'AI tools 2025'
                  ]
                  
                  print(f'Generating content for {tool_name}...')
                  content = generator.generate_ai_tool_review(tool_name, target_keywords)
                  
                  # Save content
                  with open(filename, 'w', encoding='utf-8') as f:
                      f.write(content)
                  
                  generated_files.append(filename)
                  print(f'✅ Generated: {filename}')
                  
              except Exception as e:
                  print(f'❌ Error generating content for {tool_name}: {e}')
          
          print(f'\\n📊 Generation Summary:')
          print(f'  Generated: {len(generated_files)} files')
          print(f'  Skipped: {len(skipped_files)} files')
          print(f'  Errors: {len(tools_to_process) - len(generated_files) - len(skipped_files)}')
          
          # Save file list for commit step
          with open('generated_files.txt', 'w') as f:
              f.write('\\n'.join(generated_files))
          
          # Set outputs
          with open('${GITHUB_OUTPUT}', 'a') as f:
              f.write(f'generated_count={len(generated_files)}\\n')
              f.write(f'skipped_count={len(skipped_files)}\\n')
          "

      - name: Build site with new content
        if: steps.generate.outputs.generated_count > 0
        run: |
          echo "🏗️ Building site with newly generated content..."
          hugo --minify --environment production
          
          if [ -d "public" ]; then
            echo "✅ Build successful"
            echo "📊 Site statistics:"
            echo "  HTML pages: $(find public -name "*.html" | wc -l)"
            echo "  Total size: $(du -sh public | cut -f1)"
          else
            echo "❌ Build failed"
            exit 1
          fi

      - name: Commit and push new content
        if: steps.generate.outputs.generated_count > 0
        run: |
          echo "📤 Committing generated content..."
          git config --local user.email "action@github.com"
          git config --local user.name "AI Discovery Manual Bot"
          
          # Add generated files
          if [ -f "generated_files.txt" ] && [ -s "generated_files.txt" ]; then
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                git add "$file"
                echo "Added: $file"
              fi
            done < generated_files.txt
            
            # Add any data/cache files
            git add data/ || true
            
            # Create commit message
            COMMIT_MSG="🚀 Manual content update - $(date +'%Y-%m-%d %H:%M UTC')
            
            Generated content for: ${{ github.event.inputs.tool_names }}
            Force regenerate: ${{ github.event.inputs.force_regenerate }}
            Triggered by: ${{ github.actor }}
            Generated files: ${{ steps.generate.outputs.generated_count }}
            
            🔍 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "✅ Content committed and pushed successfully"
          else
            echo "No files to commit"
          fi

      - name: Trigger deployment
        if: steps.generate.outputs.generated_count > 0 && github.event.inputs.deploy_immediately == 'true'
        run: |
          echo "🚀 Triggering deployment workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/vercel-deployment.yml/dispatches \
            -d '{"ref":"main"}'
          
          echo "✅ Deployment workflow triggered"

      - name: Summary report
        if: always()
        run: |
          echo "📋 Manual Content Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Tools requested:** ${{ github.event.inputs.tool_names }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force regenerate:** ${{ github.event.inputs.force_regenerate }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy immediately:** ${{ github.event.inputs.deploy_immediately }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- Generated files: ${{ steps.generate.outputs.generated_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Skipped files: ${{ steps.generate.outputs.skipped_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.generate.outputs.generated_count }}" -gt "0" ]; then
            echo "✅ **Status:** Content generated successfully" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.deploy_immediately }}" = "true" ]; then
              echo "🚀 **Deployment:** Triggered automatically" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏸️ **Deployment:** Manual trigger required" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **Status:** No new content generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f generated_files.txt
          echo "🧹 Cleanup completed"