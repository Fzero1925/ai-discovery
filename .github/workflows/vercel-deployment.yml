name: AI Discovery - Vercel Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Manual trigger

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  HUGO_VERSION: "0.149.0"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Pre-build validation
        run: |
          echo "üîç Running pre-build validation before deployment..."
          chmod +x scripts/pre-build-validator.sh
          if bash scripts/pre-build-validator.sh; then
            echo "‚úÖ Pre-build validation passed - proceeding with build"
          else
            echo "‚ùå Pre-build validation failed - stopping deployment"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Generate fresh content (if needed)
        run: |
          echo "üîÑ Checking for fresh content generation..."
          echo "‚úÖ Skipping content generation for deployment simplicity"
          echo "üìù Content generation can be triggered separately via manual workflow"

      - name: Build Hugo site
        env:
          HUGO_PARAMS_GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
        run: |
          echo "üèóÔ∏è Building Hugo site for production..."
          echo "üìä Google Analytics ID: ${HUGO_PARAMS_GOOGLE_ANALYTICS_ID:0:8}***"
          hugo --minify --environment production --destination public
          
          # Verify build
          if [ ! -d "public" ]; then
            echo "‚ùå Hugo build failed"
            exit 1
          fi
          
          echo "‚úÖ Hugo build successful"
          echo "üìä Build statistics:"
          echo "   HTML files: $(find public -name "*.html" | wc -l)"
          echo "   CSS files: $(find public -name "*.css" | wc -l)" 
          echo "   JS files: $(find public -name "*.js" | wc -l)"
          echo "   Total size: $(du -sh public | cut -f1)"

      - name: Deploy to Vercel (Preview)
        if: github.event_name == 'pull_request'
        run: |
          echo "üöÄ Deploying to Vercel (Preview)..."
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "preview-url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üöÄ Deploying to Vercel (Production)..."
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "production-url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT

      - name: Update deployment status
        if: always()
        run: |
          if [ -f "deployment-url.txt" ]; then
            URL=$(cat deployment-url.txt)
            echo "‚úÖ Deployment successful!"
            echo "üåê Live URL: $URL"
            
            # Comment on PR if it's a pull request
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "Preview deployed to: $URL" >> $GITHUB_STEP_SUMMARY
            else
              echo "Production deployed to: $URL" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Run basic health check
        if: success()
        run: |
          if [ -f "deployment-url.txt" ]; then
            URL=$(cat deployment-url.txt)
            echo "üè• Running health check on $URL..."
            
            # Wait a moment for deployment to be ready
            sleep 10
            
            # Check if site is accessible
            if curl -f -s "$URL" > /dev/null; then
              echo "‚úÖ Site is accessible"
              
              # Check for key elements
              if curl -s "$URL" | grep -q "AI Discovery"; then
                echo "‚úÖ Site content verified"
              else
                echo "‚ö†Ô∏è Site accessible but content may be incomplete"
              fi
            else
              echo "‚ùå Site health check failed"
            fi
          fi

      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ] && [ "${{ secrets.TELEGRAM_CHAT_ID }}" != "" ]; then
            # Determine environment
            ENVIRONMENT="production"
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              ENVIRONMENT="preview"
            fi
            
            # Determine status
            STATUS="success"
            if [ "${{ job.status }}" != "success" ]; then
              STATUS="failure"
            fi
            
            python scripts/telegram_notify.py \
              --type deployment \
              --status "$STATUS" \
              --environment "$ENVIRONMENT"
          else
            echo "‚ö†Ô∏è Telegram credentials not configured, skipping notification"
          fi

      - name: Performance metrics
        run: |
          echo "üìà Deployment Metrics"
          echo "===================="
          echo "Hugo version: $(hugo version)"
          echo "Node.js version: $(node --version)"
          echo "Vercel CLI version: $(vercel --version)"
          echo "Build timestamp: $(date)"
          echo "Commit SHA: ${{ github.sha }}"
          echo "===================="